// <auto-generated />
using System;
using FMDC.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMDC.Persistence.Migrations
{
    [DbContext(typeof(ForbiddenMemoriesDbContext))]
    [Migration("20250210000235_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FMDC.Model.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("AttackPoints")
                        .HasColumnType("int");

                    b.Property<int>("CardDescriptionImageId")
                        .HasColumnType("int");

                    b.Property<int>("CardImageId")
                        .HasColumnType("int");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<int?>("DefensePoints")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstGuardianStar")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecondGuardianStar")
                        .HasColumnType("int");

                    b.Property<int?>("StarchipCost")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("CardDescriptionImageId")
                        .IsUnique();

                    b.HasIndex("CardImageId")
                        .IsUnique();

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.CardPercentage", b =>
                {
                    b.Property<int>("CardPercentageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardPercentageId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<double>("GenerationPercentage")
                        .HasColumnType("float");

                    b.Property<int>("GenerationRatePer2048")
                        .HasColumnType("int");

                    b.Property<int>("PercentageType")
                        .HasColumnType("int");

                    b.HasKey("CardPercentageId");

                    b.HasIndex("CardId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CardPercentage", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.HasIndex("CharacterImageId")
                        .IsUnique();

                    b.ToTable("Character", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.Equippable", b =>
                {
                    b.Property<int>("EquippableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquippableId"));

                    b.Property<int>("EquipCardId")
                        .HasColumnType("int");

                    b.Property<int>("TargetCardId")
                        .HasColumnType("int");

                    b.HasKey("EquippableId");

                    b.HasIndex("EquipCardId");

                    b.HasIndex("TargetCardId");

                    b.ToTable("Equippable", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.Fusion", b =>
                {
                    b.Property<int>("FusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FusionId"));

                    b.Property<int?>("FusionMaterialCardId")
                        .HasColumnType("int");

                    b.Property<int?>("FusionMaterialMonsterType")
                        .HasColumnType("int");

                    b.Property<int>("FusionType")
                        .HasColumnType("int");

                    b.Property<int>("ResultantCardId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetCardId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetMonsterType")
                        .HasColumnType("int");

                    b.HasKey("FusionId");

                    b.HasIndex("FusionMaterialCardId");

                    b.HasIndex("ResultantCardId");

                    b.HasIndex("TargetCardId");

                    b.ToTable("Fusion", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.GameImage", b =>
                {
                    b.Property<int>("GameImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameImageId"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("ImageRelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameImageId");

                    b.ToTable("GameImage", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.SecondaryType", b =>
                {
                    b.Property<int>("SecondaryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecondaryTypeId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterType")
                        .HasColumnType("int");

                    b.HasKey("SecondaryTypeId");

                    b.HasIndex("CardId");

                    b.ToTable("SecondaryType", (string)null);
                });

            modelBuilder.Entity("FMDC.Model.Models.Card", b =>
                {
                    b.HasOne("FMDC.Model.Models.GameImage", "CardDescriptionImage")
                        .WithOne()
                        .HasForeignKey("FMDC.Model.Models.Card", "CardDescriptionImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FMDC.Model.Models.GameImage", "CardImage")
                        .WithOne()
                        .HasForeignKey("FMDC.Model.Models.Card", "CardImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CardDescriptionImage");

                    b.Navigation("CardImage");
                });

            modelBuilder.Entity("FMDC.Model.Models.CardPercentage", b =>
                {
                    b.HasOne("FMDC.Model.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FMDC.Model.Models.Character", "Character")
                        .WithMany("CardPercentages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FMDC.Model.Models.Character", b =>
                {
                    b.HasOne("FMDC.Model.Models.GameImage", "CharacterImage")
                        .WithOne()
                        .HasForeignKey("FMDC.Model.Models.Character", "CharacterImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CharacterImage");
                });

            modelBuilder.Entity("FMDC.Model.Models.Equippable", b =>
                {
                    b.HasOne("FMDC.Model.Models.Card", "EquipCard")
                        .WithMany()
                        .HasForeignKey("EquipCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FMDC.Model.Models.Card", "TargetCard")
                        .WithMany("EquippableCards")
                        .HasForeignKey("TargetCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EquipCard");

                    b.Navigation("TargetCard");
                });

            modelBuilder.Entity("FMDC.Model.Models.Fusion", b =>
                {
                    b.HasOne("FMDC.Model.Models.Card", "FusionMaterialCard")
                        .WithMany()
                        .HasForeignKey("FusionMaterialCardId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FMDC.Model.Models.Card", "ResultantCard")
                        .WithMany()
                        .HasForeignKey("ResultantCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FMDC.Model.Models.Card", "TargetCard")
                        .WithMany()
                        .HasForeignKey("TargetCardId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FusionMaterialCard");

                    b.Navigation("ResultantCard");

                    b.Navigation("TargetCard");
                });

            modelBuilder.Entity("FMDC.Model.Models.SecondaryType", b =>
                {
                    b.HasOne("FMDC.Model.Models.Card", null)
                        .WithMany("SecondaryTypes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FMDC.Model.Models.Card", b =>
                {
                    b.Navigation("EquippableCards");

                    b.Navigation("SecondaryTypes");
                });

            modelBuilder.Entity("FMDC.Model.Models.Character", b =>
                {
                    b.Navigation("CardPercentages");
                });
#pragma warning restore 612, 618
        }
    }
}
